异步编程梳理

异步会带来一个很大的问题：大量的“嵌套回调”
setTimeout(function(){
     //任务一
     setTimeout(function(){
            //任务二
     },1000)
},1000)
上面最简单的定时器异步代码，任务二的执行，必须等待任务一完成。其中最明显的问题就是如果一直异步调用，代码嵌套非常严重。
这个代码本身是没错的，逻辑也是正常的，但是从维护的角度来说，同步的代码更符合人的线性逻辑思维。

为了改成异步编程的流程问题， jQuery 也引入了 Promise 的概念。 
Promise 是一种令代码异步行为更加优雅的抽象，有了它，我们就可以像写同步代码一样去写异步代码。这个东东看起来很复杂，实际上我们只要抓住核心的使用就可以。
